

       -Esto es lo que tengo hasta ahora, sin embargo, me gustaría que me ayudarás a mejorar la "IA",
        porque me complico mucho la vida intentanto que el PC lo resuelva de la manera más "humana" posible.

    Explicación de los métodos:

        -Declaro 4 arrays correspondientes a los 4 mapas, y se mostrarán en este orden:
            -Arriba a la izquierda el tablero donde el jugador pone los barcos.
            -Arriba a la derecha el tablero donde el jugador anota sus tiros.
            -Abajo a la izquierda donde el PC pone sus barcos.
            -Abajo a la derecha donde el PC anota sus disparos.

        -Leyenda de disparos:
            -'~' es agua.
            -'H' es que el usuario ha tocado un barco enemigo.
            -'X' es que uno de los barcos del usuario ha sido tocado.
            -'W' es que el disparo del usuario es agua.

        -Se puede elegir la cantidad de barcos que tendrá la flota:
            -Como máximo podrás tener 7 barcos, y acorazados (4 casillas) no podrś tener más de la mitad.
            Si después de elegir los barcos no quedas satisfecho con la flota, puedes volver a formarla.
            -Después pregunto al usuario cuantos barcos de 4 (acorzados), 3 (portaviones), 2 (buques) y 1 casillas quiere.
            -Si la cantidad de portaviones es menor a la longitud del array significa que quedan barcos
            por poner, y la variable longitudFlota se reduce a (longitudFlota_inicial - cantidad_portaviones), y entra
            a preguntar cuánntos buques queremos. Si después de introducir el número de buques la cantidad sigue siendo
            menor a longitudFlota, los barcos restantes se asignarán automáticamente como lanchas. Aquí juego con el
            límite izquierdo y derecho para ir llenando el array según el usuario introduce sus barcos.
            -Una vez terminado el proceso, se mostrará un mensaje que te resumirá el número de barcos y su tipo.
            -El array barcos está ordenado de mayor a menor, es decir, los acorazzados estarán
            en las primeras posiciones, seguidos de los portaviones,etc.

        -El usuario tendrá la posibilidad de poner los barcos de manera horizontal (H) o vertical (V).

        -Coordenadas:
            -Recibe el array 'barcos' y el índice(que se incrementará dentro del bucle 'for') para sacar por pantalla
            el tipo de barco a poner, dependiendo del índice.
            -El usuario insertará un String. Si la longitud del String es diferente a 2, el formato es incorrecto
            y se repetirá el proceso. Cuando la longitud del input sea igual a 2, verifico con Character.isLetter y
            Character.isDigit si la pimera posición es una letra y la segunda un número. Si no, el formato es incorrecto
            y vuelta a empezar.
            -Cuando el formato es correcto, paso la letra a su quivalente en número, y verifico si ambos valores
            están dentro del tablero. Si es así, se sale del bucle y retorna un array de 2 posiciones.
            La primera posición indica la posición en el eje 'Y' (las letras) y la segunda posición del array indica
            la posición del eje 'X'.


        -Direction:
            -Siguiendo la misma mecánica que antes, pregunto la dirección del barco. Se espera un carácter del usuario,
            'V' o 'H'. Pero como el usuario puede equivocarse, la entrada será una String. Primero verifico la longitud
            del input del usuario, que sea igual a 1. Una vez verificado, verifico que el carácter es una 'V' o una 'H'. Si es así,
            se sale del segundo bucle y devuelve el mismo char toLowerCase().

        -FiltroPlayer:
            -En un bucle do while pregunto al usuario mediante los métodos anteriores por la coordenada y la
            dirección. Luego a través del método ShipFits verifico que la posición del usuario más el tamaño
            del barco en esa iteración (dependiendo de que valor tenga el índice, puede ser un barco de 4, 3 o 2)
            sea menor o igual a la longitud máxima del array-1.
            Me devuelve un booleano y pasa a la siguiente verificación.
            -El programa entrará a verificar si el barco colisiona sólo cuando el anterior método verifique que el barco
            cabe dentro del tablero. Si no, no se entrará en el bucle while y volverá a empezar desde el principio.
            -Si el barco cabe y sólo hay agua, el programa se sale del bucle y, dependiendo de la dirección,
             se rellena con cuadradaditos las posiciones correspondientes en el tablero.
            -Esto se insertará en un bucle for y se repetirá un número de veces equivalente a la longitud del array
            barcos[].

        -FiltroPC:
            -El ususario y el PC comparten método, sólo que si llamo desde el usuario, envío un booleano que activa
            ciertas flags, como mostrar mensajes o pedir manualmente las coordenadas.
            -Las coordenadas son escogidas automáticamente con un Math.random() entre los límites del array.
            -La dirección también se determina con un Math.random(), como si fuese un cara o cruz.

        -Jugar:
            -Llamamos al método ShootsPlayer:
                -La primera parte de este método llama al mismo método que usamos para poner los barcos
                dentro de un bucle do while. Si esas coordenadas tienen una 'H' o una 'W' en el tablero
                de disparos del jugador, vuelve a pedir las coordenadas.
                -Si se sale, es que las coordenadas no son repetidas.
                -Si en el tablero del PC hay un barco en esas mismas coordenadas, devolvemos true.
                Al devolver true el contador de puntos del jugador se incrementa en +1.
                -En cambio si hay agua, nos aparece un mensaje de que hemos fallado y le toca el turno
                a el PC.
            -Turno del PC:
                -Siempre que el PC acierte, nos botará y volverá a tirar.
                -Aquí siempre le envío un booleano: "aciertoPC".
                -Si es falso, las coordenadas serán totalmente aleatorias.
                -Si es cierto, entrará a sacar las coordenadas en un método, la "IA" (ya me gustaría)

            -La explicación de la IA está en su clase correspondiente.

        -La clase jugar se repetirá mientras el PC y el usuario no lleguen a la máxima puntuación.
        -La puntuación es el sumatorio de cada valor del array barcos[].
